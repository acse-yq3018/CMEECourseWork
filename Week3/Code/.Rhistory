lty = 0, projection = "polyconic")
point(x= gpdd$lat, y= gdpp$long)
points(x= gpdd$lat, y= gdpp$long)
gpdd
points(x= gpdd$lat, y= gdpp$long)
library(maps)
map(database = "world", col = colors[colorsmatched], fill = TRUE, resolution = 0,
lty = 0, projection = "polyconic")
map(database = 'world')
map(database = 'world')
map()
map(database = 'world')
points(x= gpdd$lat, y= gdpp$long)
gpdd
points(x= gpdd$lat, y= gdpp$long)
points(x= gpdd$lat, y= gpdd$long)
points(x= gpdd$lat, y= gpdd$long, col = 'red')
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 10,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 5,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 8,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
?maps
?mao
?map
# create a world map
map(database = 'world')
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
text(x= gpdd$lat, y= gpdd$long, labels = gpdd$common.name, pos = 2)
?map
# create a world map
map(database = 'world', resolution = 0)
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
text(x= gpdd$lat, y= gpdd$long, labels = gpdd$common.name, pos = 2)
text(x= gpdd$lat, y= gpdd$long, labels = gpdd$common.name, pos = 1)
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
# create a world map
map(database = 'world', resolution = 0)
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
load("../Data/KeyWestAnnualMeanTemperature.RData")
data <- ats
plot(data$Year, data$Temp)
abline(lm(data$Year~data$Temp))
abline(lm(data$Temp~data$Year))
nrow(data)
?cor
View(data)
getwd()
setwd("/home/yq3018/Documents/CMEECourseWork//Week3/Code")
?cor
load("../Data/KeyWestAnnualMeanTemperature.RData")
c <- cor(ats[1:99,2], ats[2:100,2], methof = "pearson")
c <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
load("../Data/KeyWestAnnualMeanTemperature.RData")
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
cor2 <- rep(NA, 10000)
for (i in 1:10000){
cor2[i] <- cor(sample(data[1:99,2], 99), sample(data[2:100, 2], 99))
}
cor2 <- rep(NA, 10000)
for (i in 1:10000){
cor2[i] <- cor(sample(ats[1:99, 2], 99), sample(ats[2:100, 2], 99))
}
p = length(cor2[cor2>cor1])/length(cor2)
cor2[i] <- cor(sample(ats[1:99, 2], 99), sample(ats[2:100, 2], 99), method = "pearson")
p = length(cor2[cor2>cor1])/length(cor2)
source("Vectorize2.R")
getwd()
setwd("/home/yq3018/Documents/MyRCourseWork//Week4/Code")
d <- read.table("sparrowprac2.R", header = TRUE)
d <- read.table("../Data/sparrowprac2.R", header = TRUE)
d <- read.table("../Data/SparrowSize.txt", header = TRUE)
d1 <- subset(d, d$Tarsus!="NA")
seTarsus <- sqrt(var(d1$Tarsus)/length(d1$Tarsus))
seTarsus
d12001 <- subset(d1, d1$Year==2001)
seTarsus2001 <- sqrt(var(d12001$Tarsus)/length(d12001$Tarsus0))
seTarsus2001
seTarsus2001 <- sqrt(var(d12001$Tarsus)/length(d12001$Tarsus))
seTarsus2001
mean(d$Wing)
mean(d$Wing, na.rm = TRUE)
mean(d1$Wing, na.rm = TRUE)
t.test(d$Wing~d1$Wing)
t.test(d1$Wing~d$Wing)
t.test(d1$Wing~d1$Sex)
?commandArgs
getwd
getwd()
setwd("/home/yq3018/Documents/CMEECourseWork//Week3/Code")
source("get_TreeHeight.R")
?paste
?basename
?commandArgs
?paste
load("../Data/KeyWestAnnualMeanTemperature.RData")
plot(ats$Year, ats$Temp)
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
cor2 <- rep(NA, 10000)
for (i in 1:10000){
cor2[i] <- cor(sample(ats[1:99, 2], 99), sample(ats[2:100, 2], 99), method = "pearson")
}
p = length(cor2[cor2>cor1])/length(cor2)
source("TAutoCorr.R")
View(ats)
?sample
cor1
cor2
install.packages("dplyr")
install.packages("tidyr")
############# Import packages ###############
requre(dplyr)
############# Import packages ###############
require(dplyr)
require(tidyr)
MyDataC <- tbl_df(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
MyDataC <- tbl_df(MyData)
glimpse
glimpse(MyDataC)
############# Inspect the dataset ###############
head(MyDataC)
?fix
View(MyDataC)
View(MyData)
############# Inspect the dataset ###############
head(MyDataC)
View(MyDataC)
View(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataC <- gather(MyDataC)
View(MyDataC)
View(MyDataC)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyDataC <- tbl_df(MyData)
MyMetaDataC <- tbl_df(MyMetaData)
############# Inspect the dataset ###############
head(MyDataC)
glimpse(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataC <- spread(MyDataC)
View(MyMetaDataC)
View(MyDataC)
View(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataC <- spread(MyDataC)
View(MyDataC)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
View(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
View(MyData)
?gather
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyDataC <- tbl_df(MyData)
MyMetaDataC <- tbl_df(MyMetaData)
View(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataC <- spread(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataCT <- spread(MyDataC)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataCT <- gather(MyDataC)
View(MyDataCT)
?gather
############# Import packages ###############
require(dplyr)
require(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyDataC <- tbl_df(MyData)
MyMetaDataC <- tbl_df(MyMetaData)
############# Inspect the dataset ###############
head(MyDataC)
View(MyDataC)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyDataCT <- t(MyDataC)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
# load the data
load("../Data/KeyWestAnnualMeanTemperature.RData")
# plot the data
plot(ats$Year, ats$Temp)
print(cor1)
d the data
load("../Data/KeyWestAnnualMeanTemperature.RData")
# plot the data
plot(ats$Year, ats$Temp)
# calculate the coefficient of keywest annual mean temperature
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
# calculate the radom coefficient
cor2 <- rep(NA, 10000)
for (i in 1:10000){
cor2[i] <- cor(sample(ats[1:99, 2], 99), sample(ats[2:100, 2], 99), method = "pearson")
}
# calculate the p calue
p = length(cor2[cor2>cor1])/length(cor2)
print(cor1)
print(p value)
print(p)
# Date: Oct 2018
# load the data
load("../Data/KeyWestAnnualMeanTemperature.RData")
# plot the data
plot(ats$Year, ats$Temp)
# calculate the coefficient of keywest annual mean temperature
cor1 <- cor(ats[1:99,2], ats[2:100,2], method = "pearson")
# calculate the radom coefficient
cor2 <- rep(NA, 10000)
for (i in 1:10000){
cor2[i] <- cor(sample(ats[1:99, 2], 99), sample(ats[2:100, 2], 99), method = "pearson")
}
# calculate the p calue
p = length(cor2[cor2>cor1])/length(cor2)
print(cor1)
print(p)
# print the person's r value and p value
print('Pearson r value is' + cor1)
# print the person's r value and p value
print("Pearson r value is" + cor1)
# print the person's r value and p value
print("Pearson r value is" cor1)
# print the person's r value and p value
print("Pearson r value is", cor1)
print the person's r value and p value
print("Pearson r value is")
print(cor1)
print("P-value is")
print(p)
uthor: Yuxin Qin yq3018@imperial.ac.uk
# Script: maps.R
# Description: maps the species on the map
# Date: Oct 2018
# load the maps package
library(maps)
# load the gpdd data
load("../Data/GPDDFiltered.RData")
# create a world map
map(database = 'world', resolution = 0)
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
View(gpdd)
View(ats)
View(gpdd)
?unlist
source("get_TreeHeight.R")
source("rick.R")
############# Convert data to tbl class ###############
MyData <- tbl_df(MyData)
MyMetaData <- tbl_df(MyMetaData)
############# Import packages ###############
require(dplyr)
require(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyData <- tbl_df(MyData)
############# Inspect the dataset ###############
head(MyDataC)
############# Inspect the dataset ###############
head(MyDataC)
View(MyDataC)
View(MyData)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
View(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
View(MyData)
View(MyData)
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
View(TempData)
View(TempData)
View(MyData)
source("DataWrang.R")
View(MyWrangledData)
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(Cultivation, Block, Plot,Quadrat, Species, Count) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(Cultivation, Block, Plot,Quadrat, Species, Count)
View(TempData)
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(Cultivation, Block, Plot,Quadrat, value= Species, value= Count)
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(-Cultivation, -Block, -Plot, -Quadrat, Species, Count)
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., -Cultivation, -Block, -Plot, -Quadrat, Species, Count)
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., -Cultivation, -Block, -Plot, -Quadrat, Species, Count)%%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., -Cultivation, -Block, -Plot, -Quadrat, Species, Count) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
View(MyWrangledData)
dim(MyWrangledData)
View(MyWrangledData)
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Import packages ###############
require(dplyr)
require(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyData <- tbl_df(MyData)
MyMetaData <- tbl_df(MyMetaData)
############# Inspect the dataset ###############
head(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
str(MyWrangledData)
View(MyWrangledData)
############# Start exploring the data (extend the script below)!  ###############
arrange(MyWrangledData, Cultivation)
View(MyWrangledData)
############# Start exploring the data (extend the script below)!  ###############
arrange(MyWrangledData, Species, Cultivation)
source("DataWrang.R")
View(MyWrangledData)
############# Import packages ###############
require(dplyr)
require(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Convert data to tbl class ###############
MyData <- tbl_df(MyData)
MyMetaData <- tbl_df(MyMetaData)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- TempData %>% gather(., Species, Count, -Cultivation, -Block, -Plot, -Quadrat) %>%
mutate( Cultivation = as.factor(Cultivation),
Block = as.factor(Block),
Plot = as.factor(Plot),
Quadrat = as.factor(Quadrat),
Species = as.factor(Species),
Count = as.numeric(Count))
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Start exploring the data (extend the script below)!  ###############
# arrange the data in the catogory of species first, then cultivation
arrange(MyWrangledData, Species, Cultivation)
View(MyWrangledData)
############# Start exploring the data (extend the script below)!  ###############
# arrange the data in the catogory of species first, then cultivation
MyexploredData <- arrange(MyWrangledData, Species, Cultivation)
View(MyexploredData)
# load the maps package
library(maps)
# load the gpdd data
load("../Data/GPDDFiltered.RData")
# create a world map
map(database = 'world', resolution = 0)
# superimpose on the map all the locations
points(x= gpdd$lat, y= gpdd$long, pch = 19,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$long, y= gpdd$lat, pch = 19,  col = 'red')
# load the maps package
library(maps)
# load the gpdd data
load("../Data/GPDDFiltered.RData")
# create a world map
map(database = 'world', resolution = 0)
# superimpose on the map all the locations
points(x= gpdd$long, y= gpdd$lat, pch = 19,  col = 'red')
# superimpose on the map all the locations
points(x= gpdd$long, y= gpdd$lat, pch = 19,  col = 'red')
