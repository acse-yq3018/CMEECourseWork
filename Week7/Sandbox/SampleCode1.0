import scipy as sc

a = sc.array(range(5))
a
print(type(a))
print(type(a[0]))

a = sc.array(range(5), float)
a
a.dtype

x = sc.arange(5)
x

x = sc.arange(5.) #directly specify float using decimal
x

x.shape

b = sc.array([i for i in range(10) if i%2==1]) #odd numbersbetween 1 and `0 
b

c = b.tolist() #convert back to list
c

mat = sc.array([[0, 1], [2, 3]])
mat

# note the mat is as following
# 0 1
# 2 3

mat.shape 
# shape is the morpholoy of numpy array

mat[1]
mat[;,1]

mat[0,0]
mat[1,0]

mat[;,0]

mat[0,1]
mat[0,-1]
mat[0,-2]

mat[0,0] = -1
mat

mat[:,0] = [12,12]
mat

sc.append(mat, [[12,12]], axis = 0) # append row, note axis specification

sc.append(mat, [[12],[12]], axis = 1)

newRow = [[12,12]]
mat = sc.append(mat, newRow, axis = 0) #append that existing row
mat

sc.delete(mat, 2, 0) #Delete 3rd row

mat = sc.array([[0, 1], [2, 3]])
mat0 = sc.array([[0, 10], [-1, 3]])
sc.concatenate((mat, mat0), axis = 0)

mat.ravel() # NOTE: ravel is row-priority - happens row by row
mat.reshape((4,1)) # this is different from ravel - check ?sc.reshape

mat.reshape((3, 1)) # But total elements must remain the same!

sc.ones((4,2)) #(4,2) are the (row,col) array dimensions
sc.zeros((4,2)) # or zeros

m = sc.identity(4) #create an identity matrix, identity array is a square array with ones on the main diagnoal
m

m.fill(16) #fill the matrix with 16
m

mm = sc.arange(16)
mm = mm.reshape(4,4) #Convert to matrix
mm

mm.transpose()

mm + mm.transpose()
mm - mm.transpose()
mm * mm.transpose() ## Note: Elementwise multiplication!
m // mm.transpose()
mm // (mm+1).transpose()

mm * sc.pi
mm.dot(mm) # MATRIX MULTIPLICATION
mm = sc.matrix(mm) # convert to scipy matrix class
mm

print(type(mm))

mm * mm # now matrix multiplication is syntactically easier