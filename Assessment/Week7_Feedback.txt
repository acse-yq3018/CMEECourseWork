Starting weekly assessment for Yuxin, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 2.09 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Week7, Assessment, Week2, Mainproject, .git, Week3

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.Rdata
*.Rhistory
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# My CMEE Coursework Repository

# Week1
 * Introduction to Unix
 * Shell scripting
 * LaTeX

# Week2
 * Biological computing in Python 1

# Week3
 * Biological computing in R
 * Data management, exploration and visualization
 
# Week7
 * Biological computing in Python 2
----------------------------------

Author: Yuxin Qin (yq3018@gimperial.ac.uk)

Description: This repository includes all my CMEECourseWork, including code, data and Sandbox. PLease find the detailed description of each week in README.txt of each week's directory.

Date: 2018-2019
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: Week1, Week2, Week3, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Result, Data, Sandbox

Found the following files: README

Checking for readme file in weekly directory...

Found README in parent directory, named: README

Printing contents of README:
**********************************************************************
CMEECoursework-Week7
Author: Yuxin Qin

Files List:
------------------
.
├── Code
│   ├── blackbirds.py       capture specific things in re.findall and present neatly
│   ├── DrawFW.py           draw the foodweb
│   ├── fmr.R               Rscript
│   ├── LV1.py              draw Lotka-Volterra model
│   ├── LV2.py              draw Lotka-Volterra model with system argument
│   ├── LV3.py              draw Lotka-Volterra model with different formula
│   ├── LV4.py              draw Lotka-Volterra model with another different formula
│   ├── profileme2.py       test the function of profile
│   ├── profileme.py        test the function of profile with an improved script"
│   ├── regexs.py           learn regexs
│   ├── run_fmr_R.py        use python to run fmr.R
│   ├── runLV.py            run LV1 and LV2 at the same time
│   ├── TestR.py            test how to use python to run R
│   ├── TestR.R             Rscript
│   ├── timetime.py         test the function of timeit
│   └── using_os.py         use python to run subprocess
├── Data
│   ├── blackbirds.txt
│   ├── NagyEtAl1999.csv
│   ├── QMEE_Net_Mat_edges.csv
│   └── QMEE_Net_Mat_nodes.csv
├── README
├── Result
│   └── README
├── Data
│   ├── blackbirds.txt
│   ├── NagyEtAl1999.csv
│   ├── QMEE_Net_Mat_edges.csv
│   └── QMEE_Net_Mat_nodes.csv
└── Sandbox
    └── SampleCode1.0
**********************************************************************

Found following files in results directory: README...

Found 17 code files: TestR.py, regexs.py, LV3.py, profileme2.py, blackbirds.py, TestR.R, profileme.py, LV4.py, fmr.R, using_os.py, LV1.py, DrawFW.py, Nets.R, run_fmr_R.py, timetime.py, run_LV.py, LV2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" test how to use python to run R """

__appname__ = 'TestR.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'


import subprocess
subprocess.Popen("/usr/lib/R/bin/Rscript --verbose TestR.R > \
../Result/TestR.Rout 2> ../Result/TestR_errFile.Rout",\
 shell=True).wait()**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.09615s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" learn regexs"""

__appname__ = 'regexs.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

import re
my_string = "a given string"
match = re.search(r'\s', my_string)
print(match)

match.group()

match = re.search(r'\d', my_string)
print(match)

MyStr = 'an example'

match = re.search(r'\w*\s', MyStr) # what pattern is this?

if match:                      
    print('found a match:', match.group()) 
else:
    print('did not find a match')    


match = re.search(r'2' , "it takes 2 to tango")
match.group()

match = re.search(r'\d' , "it takes 2 to tango")
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()


re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a '

re.search(r'^\w*.*?\s', 'once upon a time').group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()

re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*','1432.75+60.22i').group()

re.search(r'[AGTC]+', 'the sequence ATTCGT').group()

re.search(r'\s+[A-Z]{1}\w+\s\w+', 'The bird-shit frog''s name is Theloderma asper').group()**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 

**********************************************************************

Code ran without errors

Time consumed = 0.02843s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""draw Lotka-Volterra model with different formula"""

__appname__ = 'LV3.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import sys
import scipy as sc
import matplotlib.pylab as p

#function
def dCR_dt(pops, t=0):
    """ define the model """
    # Initiate an array to store the results
    N = sc.zeros((t,2), dtype = float)
    N[0,0] = pops[0]
    N[0,1] = pops[1]
    for i in range(t-1):
        N[i+1,0] = N[i,0]*(1+r*(1-(N[i,0]/K))-a*N[i,1])
        N[i+1,1] = N[i,1]*(1-z+e*a*N[i,0])
    return N

#dictate parameters
if len(sys.argv) ==6:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
    r = 1.0
    a = 0.1
    z = 1.5
    e = 0.75
    K = 30

#time
t = 100

#initial population
R0 = 10 #resource per unit area
C0 = 5  #consumer per unit area
RC0 = sc.array([R0, C0]) 

#return results of the function as an array
pops = dCR_dt(RC0, t)

#plot
f1 = p.figure()

p.plot(range(t), pops[:,0], 'g-', label='Resource density')
p.plot(range(t), pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(0.5,0.5))

f1.savefig('../Result/LV3_model1.pdf')
p.close(f1)

f2 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-')
p.grid()
p.xlabel('Resource density')
p.ylabel('Cosumer density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(10.5,0.1))

f2.savefig('../Result/LV3_model2.pdf')
p.close(f2)
**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.72009s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" test the function of profile with an improved script"""

__appname__ = 'profileme2'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    """ to exponent 2"""
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """ to join the value above together, separate by ,"""
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """ print my_squares and my_join"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.72174s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""capture specific things in re.findall and present neatly"""

__appname__ = 'blackbirds.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import re

# Read the file
f = open('../Data/blackbirds.txt', 'r')
text = f.read()
f.close()

# remove \t\n and put a space in:
text = text.replace('\t',' ')
text = text.replace('\n',' ')

# note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform
# to ASCII:
# text = text.decode('ascii', 'ignore') #will not work in python 3

# Now extend this script so that it captures the Kingdom, 
# Phylum and Species name for each species and prints it out to screen neatly.

# Hint: you may want to use re.findall(my_reg, text)...
# Keep in mind that there are multiple ways to skin this cat! 
# Your solution may involve multiple regular expression calls (easier!), or a single one (harder!)

kingdom = re.findall(r'Kingdom\s\w*', text)
phylum = re.findall(r'Phylum\s\w*', text)
species = re.findall(r'Species\s\w*', text)

l = len(kingdom) 

for i in range(j):
	print(kingdom[i], phylum[i], species[i])
**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "blackbirds.py", line 39, in <module>
    for i in range(j):
NameError: name 'j' is not defined

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.06244s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" test the function of profile """

__appname__ = 'profileme.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'


def my_squares(iters):
    """ to exponent 2"""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """ to join the value above together, separate by ,"""
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """ print my_squares and my_join"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.50046s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""draw Lotka-Volterra model with another different formula"""

__appname__ = 'LV4.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import sys
import scipy as sc
import scipy.stats as stats
import matplotlib.pylab as p

#function
def dCR_dt(pops, t=0):
    """ define the model """
    # Initiate an array to store the results
    N = sc.zeros((t,2), dtype = float)
    N[0,0] = pops[0]
    N[0,1] = pops[1]
    for i in range(t-1):
        N[i+1,0] = N[i,0]*(1+(r+stats.norm.rvs(0,0.1))*(1-(N[i,0]/K))-a*N[i,1])
        N[i+1,1] = N[i,1]*(1-z+stats.norm.rvs(0,0.1)+e*a*N[i,0])
    return N

#dictate parameters
if len(sys.argv) ==6:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
    r = 1.0
    a = 0.1
    z = 1.5
    e = 0.75
    K = 30

#time
t = 100

#initial population
R0 = 10 #resource per unit area
C0 = 5  #consumer per unit area
RC0 = sc.array([R0, C0]) 

#return results of the function as an array
pops = dCR_dt(RC0, t)

#plot
f1 = p.figure()

p.plot(range(t), pops[:,0], 'g-', label='Resource density') 
p.plot(range(t), pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(0.5,0.5))

f1.savefig('../Result/LV4_model1.pdf')
p.close(f1)

f2 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-')
p.grid()
p.xlabel('Resource density')
p.ylabel('Cosumer density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(10.0,0.1))

f2.savefig('../Result/LV4_model2.pdf') 
p.close(f2)
**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.88376s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Result/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.13881s

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""use python to run subprocess"""

__appname__ = 'using_os.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'


# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import re

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for strings in subdir + files:
        FilesDirsStartingWithC += re.findall(r"C.*", strings)

print("Files and directories in your home/ that start with either an upper case 'C'")
print(FilesDirsStartingWithC)

#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
FilesDirsStartingWithCc = []

for (dir, subdir, files) in subprocess.os.walk(home):
    for strings in subdir + files:
        FilesDirsStartingWithCc += re.findall(r"[Cc].*", strings)

print("Files and directories in your home/ that start with either an upper or lower case 'C'")
print(FilesDirsStartingWithCc)



#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
DirsStartingWithCc = []

for (dir, subdir, files) in subprocess.os.walk(home):
    for d in subdir:
        DirsStartingWithCc += re.findall(r"[Cc].*", d)

print("Directories in your home/ that start with either an upper or lower case 'C'")
print(DirsStartingWithCc)


print("summary")

C = len(FilesDirsStartingWithC)
Cc = len(FilesDirsStartingWithCc)
DCc = len(DirsStartingWithCc)
print("The number of files and directories in your home/ that start with an uppercase 'C' is", C)
print("The number of files and directories in your home/ that start with an uppercase or lowercase 'C' is", Cc)
print("The number of directories in your home/ that start with an uppercase or lowercase 'C' is", DCc)**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Files and directories in your home/ that start with either an upper case 'C'
['CEauthority', 'C.log.9', 'C.log.4', 'C.log.3', 'C.log.5', 'C.log.1', 'C.log.7', 'C.log.2', 'C.log', 'C.log.10', 'C.log.6', 'C.log.8', 'C.log.9', 'C.log.4', 'C.log.3', 'C.log.5', 'C.log.1', 'C.log.7', 'C.log.2', 'C.log', 'C.log.10', 'C.log.6', 'C.log.8', 'Checkpoints.json', 'CENSE.txt', 'CENSE.txt', 'CHANGELOG.md', 'CA.js', 'CA.min.js', 'CA.min.js', 'CA.js', 'CENSE.md', 'CENSE', 'CENSE', 'CODE_OF_CONDUCT.md', 'CENSE', '
**********************************************************************

Code ran without errors

Time consumed = 5.13490s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""draw Lotka-Volterra model"""

__appname__ = 'LV1.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

#function
def dCR_dt(pops, t=0):
    """ define the model """
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    return sc.array([dRdt, dCdt])

#dictate parameters
r = 1.0
a = 0.1 
z = 1.5
e = 0.75

# time vector, 0-15, 1000subdivision of time
t = sc.linspace(0, 15,  1000)

#initial population
R0 = 10 #resource per unit area
C0 = 5  #consumer per unit area
RC0 = sc.array([R0, C0]) 

#intergrate.odeint take arguments and apply the function for t timesand return result as an array.
#infodict is a dictionary containing info of integrate function
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

#plot
f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density')
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc = 'best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')

f1.savefig('../Result/LV1_model1.pdf')
p.close(f1)

f2 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-')
p.axis([5,42,2.5,25])
p.grid()
p.xlabel('Resource density')
p.ylabel('Cosumer density')
p.title('Consumer-Resource population dynamics')

f2.savefig('../Result/LV1_model2.pdf') #Save figure
p.close(f2)**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.80044s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Draw the FoodWeb"""

__appname__ = 'DrawFW.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmAdjList(N = 2, C = 0.5):#conecton, probability
    """buiding a list """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)
    return ALst
# negative effect of population

MaxN = 30
C = 0.75

AdjL = sc.array(GenRdmAdjList(MaxN, C))
AdjL

Sps = sc.unique(AdjL) # get species ids

SizRan = ([-10,10]) #use log10 scale
Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN)
Sizs

p.hist(Sizs) #log10 scale

p.hist(10 ** Sizs) #raw scale

p.close('all') # close all open plot objects

pos = nx.circular_layout(Sps)

G = nx.Graph()

G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL)) # this function needs a tuple input

NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs)) 

nx.draw_networkx(G, pos, node_size = NodSizs)

p.savefig('../Result/FoodWeb.pdf') #Save figure
**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
        
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Result/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""use python to run fmr.R"""

__appname__ = 'run_fmr_R.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

import subprocess

fmr = subprocess.Popen("/usr/lib/R/bin/Rscript --verbose fmr.R > ../Result/fmr.Rout 2> ../Result/fmr_errFile.Rout", shell = True).wait()

if fmr == 0:
    subprocess.os.system("cat ../Result/fmr.Rout")
    print("\nfmr succeeded")

if fmr != 0:
    subprocess.os.system("cat ../Result/fmr_errFile.Rout")
    print("\nfmr failed")**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

fmr succeeded

**********************************************************************

Code ran without errors

Time consumed = 0.16903s

======================================================================
Inspecting script file timetime.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""test the function of timeit"""

__appname__ = 'timetime.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'


##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################
iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

%timeit my_squares_loops(iters)
%timeit my_squares_lc(iters)


##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

%timeit(my_join_join(iters, mystring))
%timeit(my_join(iters, mystring))**********************************************************************

Testing timetime.py...

timetime.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
  File "timetime.py", line 21
    %timeit my_squares_loops(iters)
    ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""run LVs at the same time and profile them"""

__appname__ = 'runLV.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import subprocess
import time

#function
def runLV1():
    """run LV1"""
    subprocess.os.system("python3 LV1.py")

def runLV2():
    """run LV2"""
    subprocess.os.system("python3 LV2.py 1.0 0.1 1.5 0.75 3000")

def runLV3():
    """run LV3"""
    subprocess.os.system("python3 LV3.py 1.0 0.1 1.5 0.75 30")

def runLV4():
    """run LV4"""
    subprocess.os.system("python3 LV4.py 1.0 0.1 1.5 0.75 30")

#profile
start = time.time()
runLV1()
print("LV1 takes %f s to run" % (time.time() - start))

start = time.time()
runLV2()
print("LV2 takes %f s to run" % (time.time() - start))

start = time.time()
runLV3()
print("LV3 takes %f s to run" % (time.time() - start))

start = time.time()
runLV4()
print("LV4 takes %f s to run" % (time.time() - start))
**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
LV1 takes 0.743302 s to run
LV2 takes 0.776375 s to run
LV3 takes 0.743552 s to run
LV4 takes 0.866315 s to run

**********************************************************************

Code ran without errors

Time consumed = 3.17063s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""draw Lotka-Volterra model with system argument"""

__appname__ = 'LV2.py'
__author__ = 'Yuxin Qin (yq3018@imperial.ac.uk)'
__version__ = '0.0.1'

#import
import sys
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

#function
def dCR_dt(pops, t=0):
    """ define the model """
    R = pops[0]
    C = pops[1]
    dRdt = r * R * ( 1 - R / K ) - a * R * C 
    dCdt = - z * C + e * a * R * C
    return sc.array([dRdt, dCdt])

#dictate parameters
if len(sys.argv) == 6:
    r = float(sys.argv[1])
    a = float(sys.argv[2])
    z = float(sys.argv[3])
    e = float(sys.argv[4])
    K = float(sys.argv[5])
else:
    r = 1.0
    a = 0.1
    z = 1.5
    e = 0.75
    K = 3000

# time vector, 0-15, 1000subdivision of time
t = sc.linspace(0, 15,  1000)

#initial population
R0 = 10 #resource per unit area
C0 = 5  #consumer per unit area
RC0 = sc.array([R0, C0]) 

#intergrate.odeint take arguments and apply the function for t timesand return result as an array.
#infodict is a dictionary containing info of integrate function
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

#plot
f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') 
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(0.5,0.5))

f1.savefig('../Result/LV2_model1.pdf') 
p.close(f1)

f2 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-')
p.grid()
p.xlabel('Resource density')
p.ylabel('Cosumer density')
p.title('Consumer-Resource population dynamics')
p.annotate('r=%r, a=%r, z=%r, e=%r, K=%r' %(r,a,z,e,K), xy=(0.5,0.5))

f2.savefig('../Result/LV2_model2.pdf') #Save figure
p.close(f2)**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.74888s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!